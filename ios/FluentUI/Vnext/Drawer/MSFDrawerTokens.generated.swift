// swiftlint:disable all
/// Autogenerated file
import UIKit

/// Entry point for the app stylesheet
@objc extension FluentUIStyle {

	//MARK: - MSFDrawerTokens
	@objc(MSFDrawerTokensAppearanceProxy) @objcMembers open class MSFDrawerTokensAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: backgroundClearColor 
		public var _backgroundClearColor: UIColor?
		open func backgroundClearColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundClearColor { return override }
			return mainProxy().Colors.Neutral.clearProperty(traitCollection)
			}
		public var backgroundClearColor: UIColor {
			get { return self.backgroundClearColorProperty() }
			set { _backgroundClearColor = newValue }
		}

		//MARK: backgroundDimmedColor 
		public var _backgroundDimmedColor: UIColor?
		open func backgroundDimmedColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundDimmedColor { return override }
			return mainProxy().Colors.Elevation.highElevationProperty(traitCollection)
			}
		public var backgroundDimmedColor: UIColor {
			get { return self.backgroundDimmedColorProperty() }
			set { _backgroundDimmedColor = newValue }
		}

		//MARK: shadow1Blur 
		public var _shadow1Blur: CGFloat?
		open func shadow1BlurProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _shadow1Blur { return override }
			return mainProxy().Shadow.shadow28.blur1Property(traitCollection)
			}
		public var shadow1Blur: CGFloat {
			get { return self.shadow1BlurProperty() }
			set { _shadow1Blur = newValue }
		}

		//MARK: shadow1Color 
		public var _shadow1Color: UIColor?
		open func shadow1ColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _shadow1Color { return override }
			return mainProxy().Shadow.shadow28.color1Property(traitCollection)
			}
		public var shadow1Color: UIColor {
			get { return self.shadow1ColorProperty() }
			set { _shadow1Color = newValue }
		}

		//MARK: shadow1OffsetX 
		public var _shadow1OffsetX: CGFloat?
		open func shadow1OffsetXProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _shadow1OffsetX { return override }
			return mainProxy().Shadow.shadow28.x1Property(traitCollection)
			}
		public var shadow1OffsetX: CGFloat {
			get { return self.shadow1OffsetXProperty() }
			set { _shadow1OffsetX = newValue }
		}

		//MARK: shadow1OffsetY 
		public var _shadow1OffsetY: CGFloat?
		open func shadow1OffsetYProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _shadow1OffsetY { return override }
			return mainProxy().Shadow.shadow28.y1Property(traitCollection)
			}
		public var shadow1OffsetY: CGFloat {
			get { return self.shadow1OffsetYProperty() }
			set { _shadow1OffsetY = newValue }
		}

		//MARK: shadow2Blur 
		public var _shadow2Blur: CGFloat?
		open func shadow2BlurProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _shadow2Blur { return override }
			return mainProxy().Shadow.shadow28.blur2Property(traitCollection)
			}
		public var shadow2Blur: CGFloat {
			get { return self.shadow2BlurProperty() }
			set { _shadow2Blur = newValue }
		}

		//MARK: shadow2Color 
		public var _shadow2Color: UIColor?
		open func shadow2ColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _shadow2Color { return override }
			return mainProxy().Shadow.shadow28.color2Property(traitCollection)
			}
		public var shadow2Color: UIColor {
			get { return self.shadow2ColorProperty() }
			set { _shadow2Color = newValue }
		}

		//MARK: shadow2OffsetX 
		public var _shadow2OffsetX: CGFloat?
		open func shadow2OffsetXProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _shadow2OffsetX { return override }
			return mainProxy().Shadow.shadow28.x2Property(traitCollection)
			}
		public var shadow2OffsetX: CGFloat {
			get { return self.shadow2OffsetXProperty() }
			set { _shadow2OffsetX = newValue }
		}

		//MARK: shadow2OffsetY 
		public var _shadow2OffsetY: CGFloat?
		open func shadow2OffsetYProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _shadow2OffsetY { return override }
			return mainProxy().Shadow.shadow28.y2Property(traitCollection)
			}
		public var shadow2OffsetY: CGFloat {
			get { return self.shadow2OffsetYProperty() }
			set { _shadow2OffsetY = newValue }
		}
	}

}
fileprivate var __AppearanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension MSFDrawerTokens: AppearaceProxyComponent {

	public typealias AppearanceProxyType = FluentUIStyle.MSFDrawerTokensAppearanceProxy
	public var appearanceProxy: AppearanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__AppearanceProxyHandle) as? AppearanceProxyType {
				if !themeAware { return proxy }


				return proxy
			}

			return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFDrawerTokens
		}
		set {
			objc_setAssociatedObject(self, &__AppearanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
