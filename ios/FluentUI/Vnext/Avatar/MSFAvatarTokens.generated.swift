// swiftlint:disable all
/// Autogenerated file
import UIKit

/// Entry point for the app stylesheet
@objc extension FluentUIStyle {

	//MARK: - MSFAvatarTokens
	@objc(MSFAvatarTokensAppearanceProxy) @objcMembers open class MSFAvatarTokensAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: backgroundDefaultColor 
		public var _backgroundDefaultColor: UIColor?
		open func backgroundDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundDefaultColor { return override }
			return UIColor(light: mainProxy().Colors.Neutral.whiteProperty(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.primaryProperty(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
			}
		public var backgroundDefaultColor: UIColor {
			get { return self.backgroundDefaultColorProperty() }
			set { _backgroundDefaultColor = newValue }
		}

		//MARK: - borderRadius
		public var _borderRadius: borderRadiusAppearanceProxy?
		open func borderRadiusStyle() -> borderRadiusAppearanceProxy {
			if let override = _borderRadius { return override }
				return borderRadiusAppearanceProxy(proxy: mainProxy)
			}
		public var borderRadius: borderRadiusAppearanceProxy {
			get { return self.borderRadiusStyle() }
			set { _borderRadius = newValue }
		}
		@objc(MSFAvatarTokensBorderRadiusAppearanceProxy) @objcMembers open class borderRadiusAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: foregroundDefaultColor 
		public var _foregroundDefaultColor: UIColor?
		open func foregroundDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _foregroundDefaultColor { return override }
			return UIColor(light: mainProxy().Colors.Brand.primaryProperty(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Icon.accentColorProperty(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
			}
		public var foregroundDefaultColor: UIColor {
			get { return self.foregroundDefaultColorProperty() }
			set { _foregroundDefaultColor = newValue }
		}

		//MARK: presenceIconOutlineColor 
		public var _presenceIconOutlineColor: UIColor?
		open func presenceIconOutlineColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _presenceIconOutlineColor { return override }
			return mainProxy().Colors.Background.neutral1Property(traitCollection)
			}
		public var presenceIconOutlineColor: UIColor {
			get { return self.presenceIconOutlineColorProperty() }
			set { _presenceIconOutlineColor = newValue }
		}

		//MARK: - presenceIconOutlineThickness
		public var _presenceIconOutlineThickness: presenceIconOutlineThicknessAppearanceProxy?
		open func presenceIconOutlineThicknessStyle() -> presenceIconOutlineThicknessAppearanceProxy {
			if let override = _presenceIconOutlineThickness { return override }
				return presenceIconOutlineThicknessAppearanceProxy(proxy: mainProxy)
			}
		public var presenceIconOutlineThickness: presenceIconOutlineThicknessAppearanceProxy {
			get { return self.presenceIconOutlineThicknessStyle() }
			set { _presenceIconOutlineThickness = newValue }
		}
		@objc(MSFAvatarTokensPresenceIconOutlineThicknessAppearanceProxy) @objcMembers open class presenceIconOutlineThicknessAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: - presenceIconSize
		public var _presenceIconSize: presenceIconSizeAppearanceProxy?
		open func presenceIconSizeStyle() -> presenceIconSizeAppearanceProxy {
			if let override = _presenceIconSize { return override }
				return presenceIconSizeAppearanceProxy(proxy: mainProxy)
			}
		public var presenceIconSize: presenceIconSizeAppearanceProxy {
			get { return self.presenceIconSizeStyle() }
			set { _presenceIconSize = newValue }
		}
		@objc(MSFAvatarTokensPresenceIconSizeAppearanceProxy) @objcMembers open class presenceIconSizeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Icon.size.xxSmallProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Icon.size.xxxSmallProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Icon.size.xxxSmallProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return CGFloat(0.0)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Icon.size.xxSmallProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Icon.size.smallProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: ringDefaultColor 
		public var _ringDefaultColor: UIColor?
		open func ringDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _ringDefaultColor { return override }
			return mainProxy().Colors.Brand.tint10Property(traitCollection)
			}
		public var ringDefaultColor: UIColor {
			get { return self.ringDefaultColorProperty() }
			set { _ringDefaultColor = newValue }
		}

		//MARK: ringGapColor 
		public var _ringGapColor: UIColor?
		open func ringGapColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _ringGapColor { return override }
			return mainProxy().Colors.Background.neutral1Property(traitCollection)
			}
		public var ringGapColor: UIColor {
			get { return self.ringGapColorProperty() }
			set { _ringGapColor = newValue }
		}

		//MARK: - ringInnerGap
		public var _ringInnerGap: ringInnerGapAppearanceProxy?
		open func ringInnerGapStyle() -> ringInnerGapAppearanceProxy {
			if let override = _ringInnerGap { return override }
				return ringInnerGapAppearanceProxy(proxy: mainProxy)
			}
		public var ringInnerGap: ringInnerGapAppearanceProxy {
			get { return self.ringInnerGapStyle() }
			set { _ringInnerGap = newValue }
		}
		@objc(MSFAvatarTokensRingInnerGapAppearanceProxy) @objcMembers open class ringInnerGapAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.thickerProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: - ringOuterGap
		public var _ringOuterGap: ringOuterGapAppearanceProxy?
		open func ringOuterGapStyle() -> ringOuterGapAppearanceProxy {
			if let override = _ringOuterGap { return override }
				return ringOuterGapAppearanceProxy(proxy: mainProxy)
			}
		public var ringOuterGap: ringOuterGapAppearanceProxy {
			get { return self.ringOuterGapStyle() }
			set { _ringOuterGap = newValue }
		}
		@objc(MSFAvatarTokensRingOuterGapAppearanceProxy) @objcMembers open class ringOuterGapAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.thickerProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: - ringThickness
		public var _ringThickness: ringThicknessAppearanceProxy?
		open func ringThicknessStyle() -> ringThicknessAppearanceProxy {
			if let override = _ringThickness { return override }
				return ringThicknessAppearanceProxy(proxy: mainProxy)
			}
		public var ringThickness: ringThicknessAppearanceProxy {
			get { return self.ringThicknessStyle() }
			set { _ringThickness = newValue }
		}
		@objc(MSFAvatarTokensRingThicknessAppearanceProxy) @objcMembers open class ringThicknessAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.thinProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.thinProperty(traitCollection)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.thickerProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: - size
		public var _size: sizeAppearanceProxy?
		open func sizeStyle() -> sizeAppearanceProxy {
			if let override = _size { return override }
				return sizeAppearanceProxy(proxy: mainProxy)
			}
		public var size: sizeAppearanceProxy {
			get { return self.sizeStyle() }
			set { _size = newValue }
		}
		@objc(MSFAvatarTokensSizeAppearanceProxy) @objcMembers open class sizeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return CGFloat(40.0)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return CGFloat(32.0)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return CGFloat(24.0)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return CGFloat(16.0)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return CGFloat(52.0)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return CGFloat(72.0)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: textCalculatedBackgroundColors 
		public var _textCalculatedBackgroundColors: [UIColor]?
		open func textCalculatedBackgroundColorsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> [UIColor] {
			if let override = _textCalculatedBackgroundColors { return override }
			return [
			UIColor(light: mainProxy().Colors.DarkRed.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.DarkRed.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Cranberry.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Cranberry.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Red.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Red.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Pumpkin.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Pumpkin.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Peach.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Peach.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Marigold.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Marigold.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Gold.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Gold.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Brass.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brass.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Brown.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brown.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Forest.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Forest.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Seafoam.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Seafoam.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.DarkGreen.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.DarkGreen.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.LightTeal.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.LightTeal.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Teal.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Teal.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Steel.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Steel.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Blue.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Blue.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.RoyalBlue.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.RoyalBlue.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Cornflower.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Cornflower.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Navy.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Navy.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Lavender.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Lavender.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Purple.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Purple.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Grape.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Grape.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Lilac.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Lilac.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Pink.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Pink.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Magenta.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Magenta.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Plum.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Plum.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Beige.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Beige.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Mink.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Mink.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Platinum.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Platinum.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Anchor.tint40Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Anchor.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)]
			}
		public var textCalculatedBackgroundColors: [UIColor] {
			get { return self.textCalculatedBackgroundColorsProperty() }
			set { _textCalculatedBackgroundColors = newValue }
		}

		//MARK: textCalculatedForegroundColors 
		public var _textCalculatedForegroundColors: [UIColor]?
		open func textCalculatedForegroundColorsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> [UIColor] {
			if let override = _textCalculatedForegroundColors { return override }
			return [
			UIColor(light: mainProxy().Colors.DarkRed.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.DarkRed.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Cranberry.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Cranberry.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Red.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Red.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Pumpkin.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Pumpkin.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Peach.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Peach.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Marigold.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Marigold.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Gold.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Gold.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Brass.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brass.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Brown.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brown.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Forest.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Forest.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Seafoam.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Seafoam.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.DarkGreen.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.DarkGreen.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.LightTeal.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.LightTeal.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Teal.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Teal.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Steel.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Steel.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Blue.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Blue.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.RoyalBlue.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.RoyalBlue.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Cornflower.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Cornflower.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Navy.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Navy.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Lavender.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Lavender.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Purple.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Purple.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Grape.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Grape.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Lilac.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Lilac.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Pink.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Pink.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Magenta.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Magenta.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Plum.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Plum.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Beige.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Beige.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Mink.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Mink.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Platinum.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Platinum.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil), 
			UIColor(light: mainProxy().Colors.Anchor.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Anchor.tint40Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)]
			}
		public var textCalculatedForegroundColors: [UIColor] {
			get { return self.textCalculatedForegroundColorsProperty() }
			set { _textCalculatedForegroundColors = newValue }
		}

		//MARK: - textFont
		public var _textFont: textFontAppearanceProxy?
		open func textFontStyle() -> textFontAppearanceProxy {
			if let override = _textFont { return override }
				return textFontAppearanceProxy(proxy: mainProxy)
			}
		public var textFont: textFontAppearanceProxy {
			get { return self.textFontStyle() }
			set { _textFont = newValue }
		}
		@objc(MSFAvatarTokensTextFontAppearanceProxy) @objcMembers open class textFontAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: UIFont?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _large { return override }
					return UIFont.font(name: nil, size: 15.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var large: UIFont {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: UIFont?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _medium { return override }
					return UIFont.font(name: nil, size: 13.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var medium: UIFont {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: UIFont?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _small { return override }
					return UIFont.font(name: nil, size: 12.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var small: UIFont {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: UIFont?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _xSmall { return override }
					return UIFont.font(name: nil, size: 9.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var xSmall: UIFont {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: UIFont?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _xlarge { return override }
					return UIFont.font(name: nil, size: 20.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var xlarge: UIFont {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: UIFont?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _xxlarge { return override }
					return UIFont.font(name: nil, size: 28.0, textStyle: nil, weight: UIFont.Weight.medium, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var xxlarge: UIFont {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}

	}

}
fileprivate var __AppearanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension MSFAvatarTokens: AppearaceProxyComponent {

	public typealias AppearanceProxyType = FluentUIStyle.MSFAvatarTokensAppearanceProxy
	public var appearanceProxy: AppearanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__AppearanceProxyHandle) as? AppearanceProxyType {
				if !themeAware { return proxy }

				if let proxyString = Optional(String(reflecting: type(of: proxy))), proxyString.hasPrefix("FluentUI") == false {
					return proxy
				}

				if proxy is FluentUIStyle.MSFAccentAvatarTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFAccentAvatarTokens
				} else if proxy is FluentUIStyle.MSFGroupAvatarTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFGroupAvatarTokens
				} else if proxy is FluentUIStyle.MSFOutlinedAvatarTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFOutlinedAvatarTokens
				} else if proxy is FluentUIStyle.MSFOutlinedPrimaryAvatarTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFOutlinedPrimaryAvatarTokens
				} else if proxy is FluentUIStyle.MSFOverflowAvatarTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFOverflowAvatarTokens
				}
				return proxy
			}

			return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFAvatarTokens
		}
		set {
			objc_setAssociatedObject(self, &__AppearanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
