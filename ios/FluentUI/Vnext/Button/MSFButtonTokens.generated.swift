// swiftlint:disable all
/// Autogenerated file
import UIKit

/// Entry point for the app stylesheet
@objc extension FluentUIStyle {

	//MARK: - MSFButtonTokens
	@objc(MSFButtonTokensAppearanceProxy) @objcMembers open class MSFButtonTokensAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: - backgroundColor
		public var _backgroundColor: backgroundColorAppearanceProxy?
		open func backgroundColorStyle() -> backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return backgroundColorAppearanceProxy(proxy: mainProxy)
			}
		public var backgroundColor: backgroundColorAppearanceProxy {
			get { return self.backgroundColorStyle() }
			set { _backgroundColor = newValue }
		}
		@objc(MSFButtonTokensBackgroundColorAppearanceProxy) @objcMembers open class backgroundColorAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: hover 
			public var _hover: UIColor?
			open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}
			public var hover: UIColor {
				get { return self.hoverProperty() }
				set { _hover = newValue }
			}

			//MARK: pressed 
			public var _pressed: UIColor?
			open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}
			public var pressed: UIColor {
				get { return self.pressedProperty() }
				set { _pressed = newValue }
			}

			//MARK: rest 
			public var _rest: UIColor?
			open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}
			public var rest: UIColor {
				get { return self.restProperty() }
				set { _rest = newValue }
			}

			//MARK: selected 
			public var _selected: UIColor?
			open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}
			public var selected: UIColor {
				get { return self.selectedProperty() }
				set { _selected = newValue }
			}
		}


		//MARK: - borderColor
		public var _borderColor: borderColorAppearanceProxy?
		open func borderColorStyle() -> borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return borderColorAppearanceProxy(proxy: mainProxy)
			}
		public var borderColor: borderColorAppearanceProxy {
			get { return self.borderColorStyle() }
			set { _borderColor = newValue }
		}
		@objc(MSFButtonTokensBorderColorAppearanceProxy) @objcMembers open class borderColorAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Background.brandDisabledProperty(traitCollection)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: hover 
			public var _hover: UIColor?
			open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Background.brandHoverProperty(traitCollection)
				}
			public var hover: UIColor {
				get { return self.hoverProperty() }
				set { _hover = newValue }
			}

			//MARK: pressed 
			public var _pressed: UIColor?
			open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Background.brandPressedProperty(traitCollection)
				}
			public var pressed: UIColor {
				get { return self.pressedProperty() }
				set { _pressed = newValue }
			}

			//MARK: rest 
			public var _rest: UIColor?
			open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Background.brandRestProperty(traitCollection)
				}
			public var rest: UIColor {
				get { return self.restProperty() }
				set { _rest = newValue }
			}

			//MARK: selected 
			public var _selected: UIColor?
			open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Background.brandSelectedProperty(traitCollection)
				}
			public var selected: UIColor {
				get { return self.selectedProperty() }
				set { _selected = newValue }
			}
		}


		//MARK: - borderRadius
		public var _borderRadius: borderRadiusAppearanceProxy?
		open func borderRadiusStyle() -> borderRadiusAppearanceProxy {
			if let override = _borderRadius { return override }
				return borderRadiusAppearanceProxy(proxy: mainProxy)
			}
		public var borderRadius: borderRadiusAppearanceProxy {
			get { return self.borderRadiusStyle() }
			set { _borderRadius = newValue }
		}
		@objc(MSFButtonTokensBorderRadiusAppearanceProxy) @objcMembers open class borderRadiusAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.radius.xlargeProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.radius.largeProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.radius.mediumProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}


		//MARK: - borderSize
		public var _borderSize: borderSizeAppearanceProxy?
		open func borderSizeStyle() -> borderSizeAppearanceProxy {
			if let override = _borderSize { return override }
				return borderSizeAppearanceProxy(proxy: mainProxy)
			}
		public var borderSize: borderSizeAppearanceProxy {
			get { return self.borderSizeStyle() }
			set { _borderSize = newValue }
		}
		@objc(MSFButtonTokensBorderSizeAppearanceProxy) @objcMembers open class borderSizeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}


		//MARK: - iconColor
		public var _iconColor: iconColorAppearanceProxy?
		open func iconColorStyle() -> iconColorAppearanceProxy {
			if let override = _iconColor { return override }
				return iconColorAppearanceProxy(proxy: mainProxy)
			}
		public var iconColor: iconColorAppearanceProxy {
			get { return self.iconColorStyle() }
			set { _iconColor = newValue }
		}
		@objc(MSFButtonTokensIconColorAppearanceProxy) @objcMembers open class iconColorAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Foreground.brandDisabledProperty(traitCollection)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: hover 
			public var _hover: UIColor?
			open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Foreground.brandHoverProperty(traitCollection)
				}
			public var hover: UIColor {
				get { return self.hoverProperty() }
				set { _hover = newValue }
			}

			//MARK: pressed 
			public var _pressed: UIColor?
			open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Foreground.brandPressedProperty(traitCollection)
				}
			public var pressed: UIColor {
				get { return self.pressedProperty() }
				set { _pressed = newValue }
			}

			//MARK: rest 
			public var _rest: UIColor?
			open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Foreground.brandRestProperty(traitCollection)
				}
			public var rest: UIColor {
				get { return self.restProperty() }
				set { _rest = newValue }
			}

			//MARK: selected 
			public var _selected: UIColor?
			open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Foreground.brandSelectedProperty(traitCollection)
				}
			public var selected: UIColor {
				get { return self.selectedProperty() }
				set { _selected = newValue }
			}
		}


		//MARK: - iconSize
		public var _iconSize: iconSizeAppearanceProxy?
		open func iconSizeStyle() -> iconSizeAppearanceProxy {
			if let override = _iconSize { return override }
				return iconSizeAppearanceProxy(proxy: mainProxy)
			}
		public var iconSize: iconSizeAppearanceProxy {
			get { return self.iconSizeStyle() }
			set { _iconSize = newValue }
		}
		@objc(MSFButtonTokensIconSizeAppearanceProxy) @objcMembers open class iconSizeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Icon.size.smallProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Icon.size.smallProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Icon.size.xSmallProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}


		//MARK: - interspace
		public var _interspace: interspaceAppearanceProxy?
		open func interspaceStyle() -> interspaceAppearanceProxy {
			if let override = _interspace { return override }
				return interspaceAppearanceProxy(proxy: mainProxy)
			}
		public var interspace: interspaceAppearanceProxy {
			get { return self.interspaceStyle() }
			set { _interspace = newValue }
		}
		@objc(MSFButtonTokensInterspaceAppearanceProxy) @objcMembers open class interspaceAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Spacing.xSmallProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Spacing.xSmallProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Spacing.xxSmallProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}


		//MARK: - padding
		public var _padding: paddingAppearanceProxy?
		open func paddingStyle() -> paddingAppearanceProxy {
			if let override = _padding { return override }
				return paddingAppearanceProxy(proxy: mainProxy)
			}
		public var padding: paddingAppearanceProxy {
			get { return self.paddingStyle() }
			set { _padding = newValue }
		}
		@objc(MSFButtonTokensPaddingAppearanceProxy) @objcMembers open class paddingAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Spacing.largeProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Spacing.smallProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Spacing.xSmallProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}


		//MARK: - textColor
		public var _textColor: textColorAppearanceProxy?
		open func textColorStyle() -> textColorAppearanceProxy {
			if let override = _textColor { return override }
				return textColorAppearanceProxy(proxy: mainProxy)
			}
		public var textColor: textColorAppearanceProxy {
			get { return self.textColorStyle() }
			set { _textColor = newValue }
		}
		@objc(MSFButtonTokensTextColorAppearanceProxy) @objcMembers open class textColorAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Foreground.brandDisabledProperty(traitCollection)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: hover 
			public var _hover: UIColor?
			open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Foreground.brandHoverProperty(traitCollection)
				}
			public var hover: UIColor {
				get { return self.hoverProperty() }
				set { _hover = newValue }
			}

			//MARK: pressed 
			public var _pressed: UIColor?
			open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Foreground.brandPressedProperty(traitCollection)
				}
			public var pressed: UIColor {
				get { return self.pressedProperty() }
				set { _pressed = newValue }
			}

			//MARK: rest 
			public var _rest: UIColor?
			open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Foreground.brandRestProperty(traitCollection)
				}
			public var rest: UIColor {
				get { return self.restProperty() }
				set { _rest = newValue }
			}

			//MARK: selected 
			public var _selected: UIColor?
			open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Foreground.brandSelectedProperty(traitCollection)
				}
			public var selected: UIColor {
				get { return self.selectedProperty() }
				set { _selected = newValue }
			}
		}


		//MARK: - textFont
		public var _textFont: textFontAppearanceProxy?
		open func textFontStyle() -> textFontAppearanceProxy {
			if let override = _textFont { return override }
				return textFontAppearanceProxy(proxy: mainProxy)
			}
		public var textFont: textFontAppearanceProxy {
			get { return self.textFontStyle() }
			set { _textFont = newValue }
		}
		@objc(MSFButtonTokensTextFontAppearanceProxy) @objcMembers open class textFontAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: UIFont?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _large { return override }
					return mainProxy().Typography.subheadlineProperty(traitCollection)
				}
			public var large: UIFont {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: UIFont?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _medium { return override }
					return mainProxy().Typography.subheadlineProperty(traitCollection)
				}
			public var medium: UIFont {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: UIFont?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _small { return override }
					return mainProxy().Typography.footnoteProperty(traitCollection)
				}
			public var small: UIFont {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}

	}

}
fileprivate var __AppearanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension MSFButtonTokens: AppearaceProxyComponent {

	public typealias AppearanceProxyType = FluentUIStyle.MSFButtonTokensAppearanceProxy
	public var appearanceProxy: AppearanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__AppearanceProxyHandle) as? AppearanceProxyType {
				if !themeAware { return proxy }

				if let proxyString = Optional(String(reflecting: type(of: proxy))), proxyString.hasPrefix("FluentUI") == false {
					return proxy
				}

				if proxy is FluentUIStyle.MSFGhostButtonTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFGhostButtonTokens
				} else if proxy is FluentUIStyle.MSFPrimaryButtonTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFPrimaryButtonTokens
				} else if proxy is FluentUIStyle.MSFSecondaryButtonTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFSecondaryButtonTokens
				}
				return proxy
			}

			return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFButtonTokens
		}
		set {
			objc_setAssociatedObject(self, &__AppearanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
